---
# Concourse Pipeline: GitHub Release Monitor with Local Downloads
# Simple pipeline for monitoring and downloading releases without S3

resources:
  # This repository
  - name: release-monitor
    type: git
    source:
      uri: https://github.com/malston/release-monitor.git
      branch: main

  # Timer for periodic checks (every 2 hours)
  - name: timer
    type: time
    source:
      interval: 2h

jobs:
  # Monitor and download releases locally
  - name: monitor-downloads
    plan:
      - get: release-monitor
      - get: timer
        trigger: true

      - task: monitor-and-download
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: python
              tag: 3.9-slim
          
          inputs:
            - name: release-monitor
          
          outputs:
            - name: downloads
            - name: version-db
          
          params:
            GITHUB_TOKEN: ((github_token))
            
          run:
            path: bash
            args:
              - -exc
              - |
                # Setup
                cd release-monitor
                pip install -r requirements.txt
                
                # Create configuration
                cat > config.yaml << 'EOF'
                repositories:
                  - owner: istio
                    repo: istio
                    include_prereleases: false
                  
                  - owner: open-policy-agent
                    repo: gatekeeper
                    include_prereleases: false
                  
                  - owner: kubernetes-sigs
                    repo: gateway-api
                    include_prereleases: false
                
                download:
                  enabled: true
                  directory: ../downloads
                  version_db: ../version-db/version_db.json
                  asset_patterns:
                    - "*linux-amd64*"
                    - "*.tar.gz"
                    - "!*.sha256"
                    - "!*.sig"
                  verify_downloads: true
                  retry_attempts: 3
                  retry_delay: 2
                EOF
                
                # Create output directories
                mkdir -p ../downloads ../version-db
                
                # Run monitor with download
                python3 github_monitor.py --config config.yaml --download
                
                # Show results
                echo ""
                echo "=== Download Summary ==="
                if [ -d ../downloads ]; then
                  echo "Downloaded files:"
                  find ../downloads -type f -name "*.tar.gz" -o -name "*.zip" | sort
                  echo ""
                  echo "Total size:"
                  du -sh ../downloads
                else
                  echo "No files downloaded"
                fi
                
                # Create manifest
                find ../downloads -type f | sort > ../downloads/manifest.txt

      # Optional: Display download results
      - task: display-results
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: alpine
              tag: latest
          
          inputs:
            - name: downloads
            - name: version-db
          
          run:
            path: sh
            args:
              - -exc
              - |
                echo "=== Downloaded Release Assets ==="
                if [ -f downloads/manifest.txt ]; then
                  cat downloads/manifest.txt
                else
                  echo "No manifest found"
                fi
                
                echo ""
                echo "=== Version Database ==="
                if [ -f version-db/version_db.json ]; then
                  cat version-db/version_db.json | head -50
                else
                  echo "No version database found"
                fi

  # Download all releases for a specific repository
  - name: download-repository
    plan:
      - get: release-monitor

      - task: download-all
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: python
              tag: 3.9-slim
          
          inputs:
            - name: release-monitor
          
          outputs:
            - name: repository-downloads
          
          params:
            GITHUB_TOKEN: ((github_token))
            REPO_OWNER: ((download_repo_owner))
            REPO_NAME: ((download_repo_name))
            
          run:
            path: bash
            args:
              - -exc
              - |
                cd release-monitor
                pip install -r requirements.txt
                
                # Create configuration for single repository
                cat > single-repo.yaml << EOF
                repositories:
                  - owner: ${REPO_OWNER}
                    repo: ${REPO_NAME}
                
                download:
                  enabled: true
                  directory: ../repository-downloads
                  asset_patterns:
                    - "*"
                EOF
                
                # Run download
                python3 github_monitor.py --config single-repo.yaml --download --force-check
                
                # Show what was downloaded
                echo "Downloaded assets for ${REPO_OWNER}/${REPO_NAME}:"
                find ../repository-downloads -type f | sort