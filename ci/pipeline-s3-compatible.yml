# Concourse Pipeline for GitHub Release Monitor - S3-Compatible Version
# This pipeline supports both AWS S3 and S3-compatible storage (Minio, etc.)

resources:
  - name: release-monitor-repo
    type: git
    source:
      uri: ((git_repo_uri))
      branch: ((git_branch))
      private_key: ((git_private_key))

  - name: schedule-trigger
    type: time
    source:
      interval: 1h  # Check every hour

  - name: monitor-output
    type: s3
    source:
      # S3-compatible endpoint (leave empty for AWS S3)
      endpoint: ((s3_endpoint))
      
      # Standard S3 configuration
      bucket: ((s3_bucket))
      region_name: ((s3_region))
      access_key_id: ((s3_access_key))
      secret_access_key: ((s3_secret_key))
      
      # S3-compatible options
      # disable_ssl: ((s3_disable_ssl))
      skip_ssl_verification: ((s3_skip_ssl_verification))
      # use_v4: ((s3_use_v4))  # Required for Minio
      
      # File configuration
      versioned_file: release-monitor/latest-releases.json


jobs:
  - name: monitor-releases
    plan:
      - in_parallel:
          - get: release-monitor-repo
          - get: schedule-trigger
            trigger: true

      - task: check-releases
        file: release-monitor-repo/ci/tasks/check-releases/task.yml
        params:
          GITHUB_TOKEN: ((github_token))
          # Pass S3-compatible endpoint to task if needed
          S3_ENDPOINT: ((s3_endpoint))

      - put: monitor-output
        params:
          file: release-output/releases.json
          content_type: application/json

  - name: download-new-releases
    plan:
      - in_parallel:
          - get: release-monitor-repo
          - get: monitor-output
            trigger: true
            passed: [monitor-releases]

      - task: download-releases
        file: release-monitor-repo/ci/tasks/download-releases/task.yml
        input_mapping:
          release-monitor: release-monitor-repo
          monitor-output: monitor-output
        params:
          GITHUB_TOKEN: ((github_token))
          ASSET_PATTERNS: ((download_asset_patterns))
          INCLUDE_PRERELEASES: ((download_include_prereleases))
          VERIFY_DOWNLOADS: ((download_verify_downloads))
          CLEANUP_OLD_VERSIONS: ((download_cleanup_old_versions))
          KEEP_VERSIONS: ((download_keep_versions))
          REPOSITORY_OVERRIDES: ((download_repository_overrides))
          
          # S3 version database configuration
          USE_S3_VERSION_DB: ((use_s3_version_db))
          VERSION_DB_S3_BUCKET: ((version_db_s3_bucket))
          VERSION_DB_S3_PREFIX: ((version_db_s3_prefix))
          VERSION_DB_S3_REGION: ((s3_region))
          AWS_ACCESS_KEY_ID: ((s3_access_key))
          AWS_SECRET_ACCESS_KEY: ((s3_secret_key))
          
          # S3-compatible endpoint for version DB
          S3_ENDPOINT: ((s3_endpoint))
          
          # Force re-download for testing (comment out in production)
          # FORCE_DOWNLOAD: "true"

      # Upload downloaded files to S3 storage
      - task: upload-to-s3
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: python
              tag: 3.9-slim
          inputs:
            - name: downloads
            - name: release-monitor-repo
          params:
            AWS_ACCESS_KEY_ID: ((s3_access_key))
            AWS_SECRET_ACCESS_KEY: ((s3_secret_key))
            AWS_DEFAULT_REGION: ((s3_region))
            S3_ENDPOINT: ((s3_endpoint))
            S3_BUCKET: ((s3_releases_bucket))
          run:
            path: bash
            args:
              - -exc
              - |
                # Install boto3
                pip3 install --quiet boto3
                
                # Run the upload script
                cd release-monitor-repo
                python3 scripts/upload-to-s3.py

  - name: cleanup-old-releases
    plan:
      - in_parallel:
          - get: release-monitor-repo
          - get: schedule-trigger
            trigger: true

      - task: cleanup-releases
        file: release-monitor-repo/ci/tasks/download-tarballs/task.yml
        params:
          CLEANUP_MODE: "true"
          DAYS_TO_KEEP: ((cleanup_days_to_keep))
          # Pass S3-compatible configuration
          S3_ENDPOINT: ((s3_endpoint))
          AWS_ACCESS_KEY_ID: ((s3_access_key))
          AWS_SECRET_ACCESS_KEY: ((s3_secret_key))

  # Clear version database to force re-downloads
  - name: clear-version-database
    plan:
      - get: release-monitor-repo
      
      - task: clear-version-db
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: python
              tag: 3.9-slim
          params:
            AWS_ACCESS_KEY_ID: ((s3_access_key))
            AWS_SECRET_ACCESS_KEY: ((s3_secret_key))
            S3_ENDPOINT: ((s3_endpoint))
            S3_BUCKET: ((s3_bucket))
          run:
            path: bash
            args:
              - -exc
              - |
                # Install boto3
                pip3 install --quiet boto3
                
                # Clear the version database
                python3 -c "
                import boto3
                import os
                
                endpoint_url = os.environ.get('S3_ENDPOINT')
                s3_kwargs = {
                    'region_name': 'us-east-1'
                }
                if endpoint_url:
                    s3_kwargs['endpoint_url'] = endpoint_url
                
                s3 = boto3.client('s3', **s3_kwargs)
                bucket = os.environ['S3_BUCKET']
                
                # Delete the version database
                try:
                    s3.delete_object(Bucket=bucket, Key='version-db/version_db.json')
                    print(f'Successfully cleared version database from s3://{bucket}/version-db/version_db.json')
                    print('Next pipeline run will download all releases as new')
                except Exception as e:
                    print(f'Error clearing version database: {e}')
                "
                
  # Test job to clear a specific repo and trigger download
  - name: force-download-etcd
    plan:
      - get: release-monitor-repo
      
      - task: clear-etcd-from-db
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: python
              tag: 3.9-slim
          inputs:
            - name: release-monitor-repo
          params:
            AWS_ACCESS_KEY_ID: ((s3_access_key))
            AWS_SECRET_ACCESS_KEY: ((s3_secret_key))
            S3_ENDPOINT: ((s3_endpoint))
            S3_BUCKET: ((s3_bucket))
          run:
            path: bash
            args:
              - -exc
              - |
                cd release-monitor-repo
                pip3 install --quiet boto3
                export S3_BUCKET=$S3_BUCKET
                python3 scripts/clear-version-entry.py etcd-io/etcd || echo "Failed to clear, but continuing..."
                
      - task: check-releases
        file: release-monitor-repo/ci/tasks/check-releases/task.yml
        output_mapping:
          release-output: monitor-output
        params:
          GITHUB_TOKEN: ((github_token))
          S3_ENDPOINT: ((s3_endpoint))
          
      - task: download-releases
        file: release-monitor-repo/ci/tasks/download-releases/task.yml
        input_mapping:
          release-monitor: release-monitor-repo
          monitor-output: monitor-output
        params:
          GITHUB_TOKEN: ((github_token))
          ASSET_PATTERNS: ((download_asset_patterns))
          INCLUDE_PRERELEASES: ((download_include_prereleases))
          VERIFY_DOWNLOADS: ((download_verify_downloads))
          CLEANUP_OLD_VERSIONS: ((download_cleanup_old_versions))
          KEEP_VERSIONS: ((download_keep_versions))
          REPOSITORY_OVERRIDES: ((download_repository_overrides))
          
          # S3 version database configuration
          USE_S3_VERSION_DB: ((use_s3_version_db))
          VERSION_DB_S3_BUCKET: ((version_db_s3_bucket))
          VERSION_DB_S3_PREFIX: ((version_db_s3_prefix))
          VERSION_DB_S3_REGION: ((s3_region))
          AWS_ACCESS_KEY_ID: ((s3_access_key))
          AWS_SECRET_ACCESS_KEY: ((s3_secret_key))
          
          # S3-compatible endpoint for version DB
          S3_ENDPOINT: ((s3_endpoint))
      
      - task: upload-to-s3
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: python
              tag: 3.9-slim
          inputs:
            - name: downloads
            - name: release-monitor-repo
          params:
            AWS_ACCESS_KEY_ID: ((s3_access_key))
            AWS_SECRET_ACCESS_KEY: ((s3_secret_key))
            AWS_DEFAULT_REGION: ((s3_region))
            S3_ENDPOINT: ((s3_endpoint))
            S3_BUCKET: ((s3_releases_bucket))
          run:
            path: bash
            args:
              - -exc
              - |
                # Install boto3
                pip3 install --quiet boto3
                
                # Run the upload script
                cd release-monitor-repo
                python3 scripts/upload-to-s3.py

# Resource types (if not available in your Concourse deployment)
resource_types:
  - name: s3
    type: registry-image
    source:
      repository: concourse/s3-resource
      tag: 1.2.1  # Use specific version that supports endpoints