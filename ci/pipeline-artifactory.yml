# Concourse Pipeline for GitHub Release Monitor - JFrog Artifactory Version
# This pipeline uses JFrog Artifactory for storing release artifacts and version database

groups:
  - name: main-pipeline
    jobs:
      - monitor-releases
      - download-new-releases

  - name: utilities
    jobs:
      - check-version-database
      - reset-version-database
      - force-download-repo

resources:
  - name: release-monitor-repo
    type: git
    source:
      uri: ((git_repo_uri))
      branch: ((git_branch))
      private_key: ((git_private_key))

  - name: schedule-trigger
    type: time
    source:
      interval: 1h  # Check every hour

#   - name: email-notification
#     type: email
#     source:
#       smtp:
#         host: ((smtp_host))
#         port: ((smtp_port))
#         username: ((smtp_username))
#         password: ((smtp_password))
#         anonymous: ((smtp_anonymous))
#         skip_ssl_validation: ((smtp_skip_ssl_validation))
#         ca_cert: ((smtp_ca_cert))
#         host_origin: ((smtp_host_origin))
#         login_auth: ((smtp_login_auth))
#       from: ((email_from))
#       to: ((email_to))

jobs:
  - name: monitor-releases
    plan:
      - in_parallel:
          - get: release-monitor-repo
          - get: schedule-trigger
            trigger: true

      - task: check-releases
        file: release-monitor-repo/ci/tasks/check-releases/task.yml
        params:
          GITHUB_TOKEN: ((github_token))
          # Repository list override
          REPOSITORIES_OVERRIDE: ((repositories_override))

          # Artifactory configuration for version database
          ARTIFACTORY_URL: ((artifactory_url))
          ARTIFACTORY_REPOSITORY: ((artifactory_repository))
          ARTIFACTORY_API_KEY: ((artifactory_api_key))
          ARTIFACTORY_SKIP_SSL_VERIFICATION: ((artifactory_skip_ssl_verification))

      - task: upload-monitor-output
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: python
              tag: 3.11-slim
          inputs:
            - name: release-monitor-repo
            - name: release-output
          params:
            ARTIFACTORY_URL: ((artifactory_url))
            ARTIFACTORY_REPOSITORY: ((artifactory_repository))
            ARTIFACTORY_API_KEY: ((artifactory_api_key))
            ARTIFACTORY_SKIP_SSL_VERIFICATION: ((artifactory_skip_ssl_verification))
          run:
            path: bash
            args:
              - -exc
              - |
                # Install requests
                pip3 install --quiet requests

                # Upload just the releases.json file to Artifactory
                cd release-monitor-repo
                python3 scripts/upload-to-artifactory.py --releases-json

    #   - task: prepare-email-notification
    #     file: release-monitor-repo/ci/tasks/send-release-notification/task.yml
    #     params:
    #       EMAIL_SUBJECT_PREFIX: ((email_subject_prefix))
    #       INCLUDE_ASSET_DETAILS: ((email_include_asset_details))
    #       REPOSITORIES_OVERRIDE: ((repositories_override))

    #       # Artifactory version database configuration for filtering
    #       ARTIFACTORY_URL: ((artifactory_url))
    #       ARTIFACTORY_REPOSITORY: ((artifactory_repository))
    #       ARTIFACTORY_API_KEY: ((artifactory_api_key))
    #       ARTIFACTORY_SKIP_SSL_VERIFICATION: ((artifactory_skip_ssl_verification))
    #     on_success:
    #       put: email-notification
    #       params:
    #         subject: email/subject
    #         body: email/body.html

  - name: download-new-releases
    plan:
      - in_parallel:
          - get: release-monitor-repo
            trigger: true
            passed: [monitor-releases]

      - task: fetch-monitor-output
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: python
              tag: 3.11-slim
          inputs:
            - name: release-monitor-repo
          outputs:
            - name: monitor-output
          params:
            ARTIFACTORY_URL: ((artifactory_url))
            ARTIFACTORY_REPOSITORY: ((artifactory_repository))
            ARTIFACTORY_API_KEY: ((artifactory_api_key))
            ARTIFACTORY_SKIP_SSL_VERIFICATION: ((artifactory_skip_ssl_verification))
          run:
            path: bash
            args:
              - -exc
              - |
                # Install requests
                pip3 install --quiet requests

                # Download latest-releases.json from Artifactory
                cd release-monitor-repo
                python3 -c "
                import os
                import requests
                import sys

                artifactory_url = os.environ['ARTIFACTORY_URL']
                repository = os.environ['ARTIFACTORY_REPOSITORY']
                api_key = os.environ['ARTIFACTORY_API_KEY']
                verify_ssl = os.environ.get('ARTIFACTORY_SKIP_SSL_VERIFICATION', 'false').lower() != 'true'

                if not verify_ssl:
                    import urllib3
                    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

                url = f'{artifactory_url.rstrip(\"/\")}/{repository}/release-monitor/latest-releases.json'
                headers = {'Authorization': f'Bearer {api_key}'}

                print(f'Fetching monitor output from: {url}')
                response = requests.get(url, headers=headers, verify=verify_ssl)
                response.raise_for_status()

                with open('../monitor-output/latest-releases.json', 'w') as f:
                    f.write(response.text)
                print('Successfully downloaded latest-releases.json')
                "

      - task: debug-env
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: busybox
          run:
            path: sh
            args:
              - -c
              - |
                echo "=== DEBUG ENVIRONMENT VARIABLES ==="
                echo "ARTIFACTORY_URL: $ARTIFACTORY_URL"
                echo "ARTIFACTORY_REPOSITORY: $ARTIFACTORY_REPOSITORY"
                echo "==================================="
          params:
            ARTIFACTORY_URL: ((artifactory_url))
            ARTIFACTORY_REPOSITORY: ((artifactory_repository))

      - task: download-releases
        file: release-monitor-repo/ci/tasks/download-releases/task.yml
        input_mapping:
          release-monitor: release-monitor-repo
          monitor-output: monitor-output
        params:
          GITHUB_TOKEN: ((github_token))

          # Download configuration
          ASSET_PATTERNS: ((download_asset_patterns))
          INCLUDE_PRERELEASES: ((download_include_prereleases))
          VERIFY_DOWNLOADS: ((download_verify_downloads))
          CLEANUP_OLD_VERSIONS: ((download_cleanup_old_versions))
          KEEP_VERSIONS: ((download_keep_versions))
          REPOSITORY_OVERRIDES: ((download_repository_overrides))
          
          # Artifactory configuration for version database
          ARTIFACTORY_URL: ((artifactory_url))
          ARTIFACTORY_REPOSITORY: ((artifactory_repository))
          ARTIFACTORY_API_KEY: ((artifactory_api_key))
          ARTIFACTORY_SKIP_SSL_VERIFICATION: ((artifactory_skip_ssl_verification))

          # Force re-download for testing (comment out in production)
          # FORCE_DOWNLOAD: "true"

      # Upload downloaded files to Artifactory storage
      - task: upload-to-artifactory
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: python
              tag: 3.11-slim
          inputs:
            - name: downloads
            - name: release-monitor-repo
          params:
            ARTIFACTORY_URL: ((artifactory_url))
            ARTIFACTORY_REPOSITORY: ((artifactory_repository))
            ARTIFACTORY_API_KEY: ((artifactory_api_key))
            ARTIFACTORY_SKIP_SSL_VERIFICATION: ((artifactory_skip_ssl_verification))
          run:
            path: bash
            args:
              - -exc
              - |
                # Install requests
                pip3 install --quiet requests

                # Run the upload script
                cd release-monitor-repo
                python3 scripts/upload-to-artifactory.py

  # Clear version database to force re-downloads
  - name: check-version-database
    plan:
      - get: release-monitor-repo

      - task: show-version-db
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: python
              tag: 3.11-slim
          inputs:
            - name: release-monitor-repo
          params:
            ARTIFACTORY_URL: ((artifactory_url))
            ARTIFACTORY_REPOSITORY: ((artifactory_repository))
            ARTIFACTORY_API_KEY: ((artifactory_api_key))
            ARTIFACTORY_SKIP_SSL_VERIFICATION: ((artifactory_skip_ssl_verification))
          run:
            path: bash
            args:
              - -exc
              - |
                # Install requests
                pip3 install --quiet requests

                # Run the show database script
                cd release-monitor-repo
                python3 scripts/show-version-db-artifactory.py

  - name: reset-version-database
    plan:
      - get: release-monitor-repo

      - task: clear-version-db
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: python
              tag: 3.11-slim
          inputs:
            - name: release-monitor-repo
          params:
            ARTIFACTORY_URL: ((artifactory_url))
            ARTIFACTORY_REPOSITORY: ((artifactory_repository))
            ARTIFACTORY_API_KEY: ((artifactory_api_key))
            ARTIFACTORY_SKIP_SSL_VERIFICATION: ((artifactory_skip_ssl_verification))
          run:
            path: bash
            args:
              - -exc
              - |
                # Install requests
                pip3 install --quiet requests

                # Run the clear database script
                cd release-monitor-repo
                python3 scripts/clear-version-db-artifactory.py

  # Parameterized job to force download any repository for testing
  # Usage: fly trigger-job -j pipeline-name/force-download-repo -v force_download_repo="owner/repo"
  - name: force-download-repo
    plan:
      - get: release-monitor-repo

      - task: clear-repo-from-db
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: python
              tag: 3.11-slim
          inputs:
            - name: release-monitor-repo
          params:
            ARTIFACTORY_URL: ((artifactory_url))
            ARTIFACTORY_REPOSITORY: ((artifactory_repository))
            ARTIFACTORY_API_KEY: ((artifactory_api_key))
            ARTIFACTORY_SKIP_SSL_VERIFICATION: ((artifactory_skip_ssl_verification))
            REPO_NAME: ((force_download_repo))  # Parameter: e.g., "etcd-io/etcd"
          run:
            path: bash
            args:
              - -exc
              - |
                cd release-monitor-repo
                pip3 install --quiet requests

                # Validate repository parameter
                if [ -z "$REPO_NAME" ]; then
                  echo "Error: REPO_NAME parameter is required"
                  echo "Usage: fly trigger-job -j pipeline-name/force-download-repo -v force_download_repo=\"owner/repo\""
                  exit 1
                fi

                echo "Clearing $REPO_NAME from version database..."
                python3 scripts/clear-version-entry-artifactory.py "$REPO_NAME" || echo "Failed to clear, but continuing..."

      - task: check-releases
        file: release-monitor-repo/ci/tasks/check-releases/task.yml
        params:
          GITHUB_TOKEN: ((github_token))
          # Repository list override
          REPOSITORIES_OVERRIDE: ((repositories_override))
          # Artifactory configuration for version database
          ARTIFACTORY_URL: ((artifactory_url))
          ARTIFACTORY_REPOSITORY: ((artifactory_repository))
          ARTIFACTORY_API_KEY: ((artifactory_api_key))
          ARTIFACTORY_SKIP_SSL_VERIFICATION: ((artifactory_skip_ssl_verification))

      - task: fetch-monitor-output
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: python
              tag: 3.11-slim
          inputs:
            - name: release-monitor-repo
          outputs:
            - name: monitor-output
          params:
            ARTIFACTORY_URL: ((artifactory_url))
            ARTIFACTORY_REPOSITORY: ((artifactory_repository))
            ARTIFACTORY_API_KEY: ((artifactory_api_key))
            ARTIFACTORY_SKIP_SSL_VERIFICATION: ((artifactory_skip_ssl_verification))
          run:
            path: bash
            args:
              - -exc
              - |
                # Install requests
                pip3 install --quiet requests

                # Download latest-releases.json from Artifactory
                cd release-monitor-repo
                python3 -c "
                import os
                import requests
                import sys

                artifactory_url = os.environ['ARTIFACTORY_URL']
                repository = os.environ['ARTIFACTORY_REPOSITORY']
                api_key = os.environ['ARTIFACTORY_API_KEY']
                verify_ssl = os.environ.get('ARTIFACTORY_SKIP_SSL_VERIFICATION', 'false').lower() != 'true'

                if not verify_ssl:
                    import urllib3
                    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

                url = f'{artifactory_url.rstrip(\"/\")}/{repository}/release-monitor/latest-releases.json'
                headers = {'Authorization': f'Bearer {api_key}'}

                print(f'Fetching monitor output from: {url}')
                response = requests.get(url, headers=headers, verify=verify_ssl)
                response.raise_for_status()

                with open('../monitor-output/latest-releases.json', 'w') as f:
                    f.write(response.text)
                print('Successfully downloaded latest-releases.json')
                "

      - task: download-releases
        file: release-monitor-repo/ci/tasks/download-releases/task.yml
        input_mapping:
          release-monitor: release-monitor-repo
          monitor-output: monitor-output
        params:
          GITHUB_TOKEN: ((github_token))
          ASSET_PATTERNS: ((download_asset_patterns))
          INCLUDE_PRERELEASES: ((download_include_prereleases))
          VERIFY_DOWNLOADS: ((download_verify_downloads))
          CLEANUP_OLD_VERSIONS: ((download_cleanup_old_versions))
          KEEP_VERSIONS: ((download_keep_versions))
          REPOSITORY_OVERRIDES: ((download_repository_overrides))

          # Artifactory configuration for version database
          ARTIFACTORY_URL: ((artifactory_url))
          ARTIFACTORY_REPOSITORY: ((artifactory_repository))
          ARTIFACTORY_API_KEY: ((artifactory_api_key))
          ARTIFACTORY_SKIP_SSL_VERIFICATION: ((artifactory_skip_ssl_verification))

      - task: upload-to-artifactory
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: python
              tag: 3.11-slim
          inputs:
            - name: downloads
            - name: release-monitor-repo
          params:
            ARTIFACTORY_URL: ((artifactory_url))
            ARTIFACTORY_REPOSITORY: ((artifactory_repository))
            ARTIFACTORY_API_KEY: ((artifactory_api_key))
            ARTIFACTORY_SKIP_SSL_VERIFICATION: ((artifactory_skip_ssl_verification))
          run:
            path: bash
            args:
              - -exc
              - |
                # Install requests
                pip3 install --quiet requests

                # Run the upload script
                cd release-monitor-repo
                python3 scripts/upload-to-artifactory.py

# Resource types (if not available in your Concourse deployment)
resource_types:
  - name: email
    type: registry-image
    source:
      repository: pcfseceng/email-resource
      tag: 1.0.19
