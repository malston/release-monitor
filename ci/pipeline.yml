# Concourse Pipeline for GitHub Release Monitor
# This pipeline runs the release monitoring script on a schedule and downloads new releases

resources:
  - name: release-monitor-repo
    type: git
    source:
      uri: ((git_repo_uri))
      branch: ((git_branch))
      private_key: ((git_private_key))

  - name: schedule-trigger
    type: time
    source:
      interval: 1h  # Check every hour

  - name: monitor-output
    type: s3
    source:
      bucket: ((s3_bucket))
      region_name: ((s3_region))
      access_key_id: ((s3_access_key))
      secret_access_key: ((s3_secret_key))
      versioned_file: release-monitor/latest-releases.json

  - name: release-storage
    type: s3
    source:
      bucket: ((s3_releases_bucket))
      region_name: ((s3_region))
      access_key_id: ((s3_access_key))
      secret_access_key: ((s3_secret_key))
      regexp: release-downloads/(.*)

  - name: version-db-storage
    type: s3
    source:
      bucket: ((s3_bucket))
      region_name: ((s3_region))
      access_key_id: ((s3_access_key))
      secret_access_key: ((s3_secret_key))
      versioned_file: release-monitor/version_db.json

jobs:
  - name: monitor-releases
    plan:
      - in_parallel:
          - get: release-monitor-repo
          - get: schedule-trigger
            trigger: true
          - get: version-db-storage
            optional: true

      - task: check-releases
        file: release-monitor-repo/ci/tasks/check-releases/task.yml
        input_mapping:
          version-db: version-db-storage

      - put: monitor-output
        params:
          file: release-output/releases.json
          content_type: application/json

  - name: download-new-releases
    plan:
      - in_parallel:
          - get: release-monitor-repo
          - get: monitor-output
            trigger: true
            passed: [monitor-releases]
          - get: version-db-storage
            optional: true

      - task: download-releases
        file: release-monitor-repo/ci/tasks/download-releases/task.yml
        input_mapping:
          monitor-output: monitor-output
          version-db: version-db-storage
        params:
          GITHUB_TOKEN: ((github_token))
          ASSET_PATTERNS: ((download_asset_patterns))
          INCLUDE_PRERELEASES: ((download_include_prereleases))
          VERIFY_DOWNLOADS: ((download_verify_downloads))
          CLEANUP_OLD_VERSIONS: ((download_cleanup_old_versions))
          KEEP_VERSIONS: ((download_keep_versions))
          REPOSITORY_OVERRIDES: ((download_repository_overrides))

      - in_parallel:
          - put: release-storage
            params:
              file: downloads/*
              acl: private

          - put: version-db-storage
            params:
              file: version-db/version_db.json
              content_type: application/json

  - name: cleanup-old-releases
    plan:
      - in_parallel:
          - get: release-monitor-repo
          - get: schedule-trigger
            trigger: true

      - task: cleanup-releases
        file: release-monitor-repo/ci/tasks/download-tarballs/task.yml
        params:
          CLEANUP_MODE: "true"
          DAYS_TO_KEEP: ((cleanup_days_to_keep))

# Resource types (if not available in your Concourse deployment)
resource_types:
  - name: s3
    type: docker-image
    source:
      repository: concourse/s3-resource