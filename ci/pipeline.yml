# Concourse Pipeline for GitHub Release Monitor
# This pipeline runs the release monitoring script on a schedule and downloads new releases

resources:
  - name: release-monitor-repo
    type: git
    icon: github
    source:
      uri: ((git_repo_uri))
      branch: ((git_branch))
      private_key: ((git_private_key))

  - name: schedule-trigger
    type: time
    icon: clock-outline
    source:
      interval: 1h  # Check every hour

  - name: monitor-output
    type: s3
    icon: cloud-download
    source:
      endpoint: ((s3_endpoint))
      bucket: ((s3_bucket))
      region_name: ((s3_region))
      access_key_id: ((s3_access_key))
      secret_access_key: ((s3_secret_key))
      skip_ssl_verification: ((s3_skip_ssl_verification))
      versioned_file: release-monitor/latest-releases.json

jobs:
  - name: monitor-releases
    plan:
      - in_parallel:
          - get: release-monitor-repo
          - get: schedule-trigger
            trigger: true

      - task: check-releases
        file: release-monitor-repo/ci/tasks/check-releases/task.yml
        params:
          GITHUB_TOKEN: ((github_token))
          # Pass S3-compatible endpoint to task if needed
          S3_ENDPOINT: ((s3_endpoint))
          # Repository list override
          REPOSITORIES_OVERRIDE: ((repositories_override))

      - put: monitor-output
        params:
          file: release-output/releases.json
          content_type: application/json

  - name: download-new-releases
    plan:
      - in_parallel:
          - get: release-monitor-repo
          - get: monitor-output
            trigger: true
            passed: [monitor-releases]

      - task: download-releases
        file: release-monitor-repo/ci/tasks/download-releases/task.yml
        input_mapping:
          release-monitor: release-monitor-repo
          monitor-output: monitor-output
        params:
          GITHUB_TOKEN: ((github_token))
          INCLUDE_PRERELEASES: ((download_include_prereleases))
          VERIFY_DOWNLOADS: ((download_verify_downloads))
          CLEANUP_OLD_VERSIONS: ((download_cleanup_old_versions))
          KEEP_VERSIONS: ((download_keep_versions))
          REPOSITORY_OVERRIDES: ((repositories_override))
          # S3 version database configuration
          USE_S3_VERSION_DB: ((use_s3_version_db))
          VERSION_DB_S3_BUCKET: ((version_db_s3_bucket))
          VERSION_DB_S3_PREFIX: ((version_db_s3_prefix))
          VERSION_DB_S3_REGION: ((s3_region))
          AWS_ACCESS_KEY_ID: ((s3_access_key))
          AWS_SECRET_ACCESS_KEY: ((s3_secret_key))
          # S3-compatible endpoint for version DB
          S3_ENDPOINT: ((s3_endpoint))
          S3_SKIP_SSL_VERIFICATION: ((s3_skip_ssl_verification))

      # Upload downloaded files to S3 storage
      - task: upload-to-s3
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: python
              tag: 3.11-slim
          inputs:
            - name: downloads
            - name: release-monitor-repo
          params:
            AWS_ACCESS_KEY_ID: ((s3_access_key))
            AWS_SECRET_ACCESS_KEY: ((s3_secret_key))
            AWS_DEFAULT_REGION: ((s3_region))
            S3_ENDPOINT: ((s3_endpoint))
            S3_BUCKET: ((s3_releases_bucket))
            S3_SKIP_SSL_VERIFICATION: ((s3_skip_ssl_verification))
          run:
            path: bash
            args:
              - -exc
              - |
                # Install boto3
                pip3 install --quiet boto3

                # Run the upload script
                cd release-monitor-repo
                python3 scripts/upload-to-s3.py

# Resource types (if not available in your Concourse deployment)
resource_types:
  - name: s3
    type: registry-image
    source:
      repository: concourse/s3-resource
      tag: 1.2.1  # Use specific version that supports endpoints