services:

  # ==========================================================================
  # CONCOURSE POSTGRESQL
  # ==========================================================================

  concourse-db:
    image: postgres
    platform: linux/arm64
    container_name: release-monitor-concourse-db
    # ports:
    #   - "5432:5432"  # Expose for debugging if needed
    environment:
      POSTGRES_DB: &PG_DBNAME concourse
      POSTGRES_PASSWORD: &PG_PASSWORD concourse_pass
      POSTGRES_USER: &PG_USER concourse_user
      PGDATA: /database

  # ==========================================================================
  # ARTIFACTORY POSTGRESQL
  # ==========================================================================

  postgres:
    image: postgres:13
    container_name: release-monitor-artifactory-postgres
    environment:
      POSTGRES_DB: artifactory
      POSTGRES_USER: artifactory
      POSTGRES_PASSWORD: artifactory
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"  # Expose for debugging if needed
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U artifactory -d artifactory"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # ==========================================================================
  # MINIO S3-Compatible Storage
  # ==========================================================================

  minio:
    image: minio/minio:latest
    container_name: release-monitor-minio
    ports:
      - "9000:9000"     # API port
      - "9001:9001"     # Console port
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_CONSOLE_ADDRESS: ":9001"
    command: server /data
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    # networks:
    #   - release-monitor-net
    restart: unless-stopped

  minio-setup:
    image: minio/mc:latest
    container_name: release-monitor-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      # Wait for Minio to be ready
      sleep 5;

      # Configure mc client
      mc alias set local http://minio:9000 minioadmin minioadmin;

      # Create buckets for release monitor
      mc mb local/release-monitor-output --ignore-existing;
      mc mb local/release-monitor-artifacts --ignore-existing;

      # Enable versioning on output bucket
      mc version enable local/release-monitor-output;

      # Create a test user with specific permissions (optional)
      mc admin user add local release-monitor-user release-monitor-pass;

      # Create policy for release-monitor user
      cat > /tmp/release-monitor-policy.json <<EOF
      {
        \"Version\": \"2012-10-17\",
        \"Statement\": [
          {
            \"Effect\": \"Allow\",
            \"Action\": [
              \"s3:GetObject\",
              \"s3:PutObject\",
              \"s3:DeleteObject\",
              \"s3:ListBucket\",
              \"s3:GetBucketLocation\",
              \"s3:GetBucketVersioning\"
            ],
            \"Resource\": [
              \"arn:aws:s3:::release-monitor-output/*\",
              \"arn:aws:s3:::release-monitor-output\",
              \"arn:aws:s3:::release-monitor-artifacts/*\",
              \"arn:aws:s3:::release-monitor-artifacts\"
            ]
          }
        ]
      }
      EOF

      # Apply policy to user
      mc admin policy create local release-monitor-policy /tmp/release-monitor-policy.json;
      mc admin policy attach local release-monitor-policy --user release-monitor-user;

      echo 'Minio setup completed!';
      echo '';
      echo 'Buckets created:';
      mc ls local/;
      echo '';
      echo 'Access Minio:';
      echo '  - API: http://localhost:9000';
      echo '  - Console: http://localhost:9001';
      echo '  - Credentials: minioadmin / minioadmin';
      echo '';
      echo 'Release Monitor User:';
      echo '  - Username: release-monitor-user';
      echo '  - Password: release-monitor-pass';
      "
    # networks:
    #   - release-monitor-net

# Usage Instructions:
#
# 1. Start Minio:
#    docker-compose up -d
#
# 2. Access Minio Console:
#    http://localhost:9001
#    Login: minioadmin / minioadmin
#
# 3. Configure release-monitor to use Minio:
#    - Endpoint: http://localhost:9000
#    - Access Key: release-monitor-user
#    - Secret Key: release-monitor-pass
#    - Buckets: release-monitor-output, release-monitor-artifacts
#
# 4. Test S3 connectivity:
#    aws s3 ls --endpoint-url http://localhost:9000 \
#      --aws-access-key-id release-monitor-user \
#      --aws-secret-access-key release-monitor-pass
#
# 5. Stop services:
#    docker-compose down
#
# 6. Remove data:
#    docker-compose down -v

  # ==========================================================================
  # JFROG ARTIFACTORY OSS
  # ==========================================================================

  # Pre-setup service to generate master key before Artifactory starts
  artifactory-setup:
    image: alpine:latest
    container_name: release-monitor-artifactory-setup
    volumes:
      - artifactory-data:/opt/jfrog/artifactory
    command:
      - sh
      - -c
      - |
        echo '🔑 Setting up Artifactory master keys for PostgreSQL version...'

        # Install required packages
        apk add --no-cache openssl

        # Wait a moment for container to start
        sleep 20

        # Create complete directory structure
        mkdir -p /opt/jfrog/artifactory/var/etc/security
        mkdir -p /opt/jfrog/artifactory/var/data
        mkdir -p /opt/jfrog/artifactory/var/log
        mkdir -p /opt/jfrog/artifactory/var/work/run

        # Generate master key
        if [ ! -f /opt/jfrog/artifactory/var/etc/security/master.key ]; then
          echo '📝 Generating master key...'
          openssl rand -hex 16 > /opt/jfrog/artifactory/var/etc/security/master.key
          echo '✅ Master key generated'
        fi

        # Generate join key
        if [ ! -f /opt/jfrog/artifactory/var/etc/security/join.key ]; then
          echo '📝 Generating join key...'
          openssl rand -hex 32 > /opt/jfrog/artifactory/var/etc/security/join.key
          echo '✅ Join key generated'
        fi

        # Set ownership to artifactory user (UID 1030) for all directories
        chown -R 1030:1030 /opt/jfrog/artifactory/var

        # Set permissions
        chmod 750 /opt/jfrog/artifactory/var/etc/security
        chmod 640 /opt/jfrog/artifactory/var/etc/security/master.key
        chmod 640 /opt/jfrog/artifactory/var/etc/security/join.key

        echo '🎉 Setup complete!'

  # JFrog Artifactory OSS with PostgreSQL and pre-generated master keys
  artifactory:
    image: releases-docker.jfrog.io/jfrog/artifactory-oss:latest
    container_name: release-monitor-artifactory
    depends_on:
      postgres:
        condition: service_healthy
      artifactory-setup:
        condition: service_completed_successfully
    ports:
      - "8081:8081"     # Artifactory UI and API
      - "8082:8082"     # Artifactory access port
    environment:
      # JVM settings
      JF_SHARED_JAVA_XMS: 512m
      JF_SHARED_JAVA_XMX: 2g
      # PostgreSQL database configuration
      JF_SHARED_DATABASE_TYPE: postgresql
      JF_SHARED_DATABASE_URL: jdbc:postgresql://postgres:5432/artifactory
      JF_SHARED_DATABASE_USERNAME: artifactory
      JF_SHARED_DATABASE_PASSWORD: artifactory
      JF_SHARED_DATABASE_DRIVER: org.postgresql.Driver
      # Disable HA features for single instance
      JF_SHARED_NODE_HAENABLED: false
      # Reduce logging
      JF_ROUTER_LOGGING_LEVEL: WARN
      JF_ACCESS_LOGGING_LEVEL: WARN
      # Set home directory
      JFROG_HOME: /opt/jfrog/artifactory
      # Database connection settings
      JF_SHARED_DATABASE_MAXOPENCONNECTIONS: 80
      JF_SHARED_DATABASE_MAXIDLECONNECTIONS: 20
      # Wait for database to be ready
      SKIP_WAIT_FOR_EXTERNAL_DB: false
    volumes:
      - artifactory-data:/var/opt/jfrog/artifactory
      - artifactory-logs:/var/opt/jfrog/artifactory/logs
    ulimits:
      nproc: 16384
      nofile:
        soft: 8192
        hard: 16384
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/ || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 20
      start_period: 480s  # Longer start period for database initialization
    mem_limit: 4g  # More memory for PostgreSQL setup
    cpus: 2.0
    restart: unless-stopped

  # ==========================================================================
  # SETUP AND STATUS CHECKER
  # ==========================================================================

  setup-checker:
    image: curlimages/curl:latest
    container_name: release-monitor-setup-checker
    depends_on:
      minio:
        condition: service_healthy
      artifactory:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c '
      echo "=== Release Monitor Infrastructure Status ===";
      echo "";

      # Check MinIO
      echo "🗄️  MinIO S3-Compatible Storage:";
      if curl -s -f http://minio:9000/minio/health/live > /dev/null; then
        echo "   ✅ Status: Running";
        echo "   📋 Console: http://localhost:9001";
        echo "   🔑 Login: minioadmin / minioadmin";
        echo "   🪣 Buckets: release-monitor-output, release-monitor-artifacts";
        echo "   🔗 API: http://localhost:9000";
      else
        echo "   ❌ Status: Not ready";
      fi
      echo "";

      # Check Artifactory
      echo "🏺 JFrog Artifactory OSS:";
      if curl -s -f http://artifactory:8082/artifactory/api/system/ping > /dev/null; then
        echo "✅ Status: Healthy and ready for setup";
        echo "🌐 Modern UI: http://localhost:8082/ui/";
        echo "🌐 Classic UI: http://localhost:8081/artifactory/";
        echo "📦 Repository: Create \"generic-releases\"";
        echo "🔑 Default Login: admin / password";
        echo "💾 Database: PostgreSQL";
        echo "";
        echo "📋 Next Steps:";
        echo "1. Visit http://localhost:8082/ui/ (recommended)";
        echo "2. Complete the setup wizard";
        echo "3. Create a repository named: generic-releases";
        echo "4. Generate an API key for automation";
        echo "";
        echo "🔧 For Release Monitor, set these environment variables:";
        echo "  export ARTIFACTORY_URL=\"http://localhost:8081/artifactory\"";
        echo "  export ARTIFACTORY_REPOSITORY=\"generic-releases\"";
        echo "  export ARTIFACTORY_API_KEY=\"your-generated-api-key\"";
        echo "";
        echo "🐘 PostgreSQL database is running and connected!";
        echo "";
      else
        echo "   ❌ Status: Not ready (may still be starting...)";
      fi
      echo "";

      # Check PostgreSQL
      echo "🐘 PostgreSQL Database:";
      if nc -z postgres 5432 2>/dev/null; then
        echo "   ✅ Status: Running";
        echo "   🔗 Connection: localhost:5432";
        echo "   🔑 Login: release_monitor / release_monitor_pass";
        echo "   📊 Database: release_monitor";
      else
        echo "   ❌ Status: Not ready";
      fi
      echo "";

      echo "=== Configuration Examples ===";
      echo "";
      echo "For MinIO S3-Compatible:";
      echo "  export S3_ENDPOINT=http://localhost:9000";
      echo "  export S3_BUCKET=release-monitor-output";
      echo "  export VERSION_DB_S3_BUCKET=release-monitor-output";
      echo "  export AWS_ACCESS_KEY_ID=minioadmin";
      echo "  export AWS_SECRET_ACCESS_KEY=minioadmin";
      echo "";
      echo "For JFrog Artifactory:";
      echo "  export ARTIFACTORY_URL=http://localhost:8081/artifactory";
      echo "  export ARTIFACTORY_REPOSITORY=generic-releases";
      echo "  export ARTIFACTORY_USERNAME=admin";
      echo "  export ARTIFACTORY_PASSWORD=your-password";
      echo "";
      echo "=== Next Steps ===";
      echo "1. Complete Artifactory setup wizard at http://localhost:8081";
      echo "2. Create \"generic-releases\" repository in Artifactory";
      echo "3. Run: python3 github_monitor.py";
      echo "4. Run: python3 download_releases.py";
      echo "";
      '
    # networks:
    #   - release-monitor-net

  # =============================================================================
  # CONCOURSE CI
  # =============================================================================
  concourse:
    image: rdclda/concourse:7.9.1
    platform: linux/arm64
    container_name: release-monitor-concourse
    command: quickstart
    privileged: true
    depends_on:
      - concourse-db
    ports:
      - "8080:8080"
    environment:
      CONCOURSE_POSTGRES_HOST: concourse-db
      CONCOURSE_POSTGRES_USER: *PG_USER
      CONCOURSE_POSTGRES_PASSWORD: *PG_PASSWORD
      CONCOURSE_POSTGRES_DATABASE: *PG_DBNAME
      CONCOURSE_EXTERNAL_URL: http://localhost:8080
      CONCOURSE_ADD_LOCAL_USER: test:test
      CONCOURSE_MAIN_TEAM_LOCAL_USER: test
      CONCOURSE_WORKER_SWEEP_INTERVAL: 24h
      # If running on a non M1/M2 MacOS, optionally change this to overlay
      # CONCOURSE_WORKER_BAGGAGECLAIM_DRIVER: naive
      CONCOURSE_WORKER_BAGGAGECLAIM_DISABLE_USER_NAMESPACES: true
      CONCOURSE_CLIENT_SECRET: Y29uY291cnNlLXdlYgo=
      CONCOURSE_TSA_CLIENT_SECRET: Y29uY291cnNlLXdvcmtlcgo=
      CONCOURSE_X_FRAME_OPTIONS: allow
      CONCOURSE_CONTENT_SECURITY_POLICY: "*"
      CONCOURSE_CLUSTER_NAME: tutorial
      CONCOURSE_WORKER_WORK_DIR: /worker-state
      # If running on a non M1/M2 MacOS, optionally change this to guardian (default) or containerd (if cgroupsv2 is supported by the host)
      # CONCOURSE_WORKER_RUNTIME: "houdini"
      CONCOURSE_WORKER_RUNTIME: "houdini"
      CONCOURSE_WORKER_BAGGAGECLAIM_DRIVER: overlay

volumes:
  minio-data:
    driver: local
  artifactory-data:
    driver: local
  artifactory-logs:
    driver: local
  postgres-data:
    driver: local

# networks:
#   release-monitor-net:
#     driver: bridge
#     ipam:
#       config:
#         - subnet: 172.20.0.0/24

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================
#
# Quick Start - All Services:
#   docker-compose -f docker-compose.yml up -d
#   docker-compose -f docker-compose.yml logs -f setup-checker
#
# Individual Services:
#   # MinIO only
#   docker-compose -f docker-compose.yml up -d minio minio-setup
#
#   # Artifactory only
#   docker-compose -f docker-compose.yml up -d artifactory
#
#   # PostgreSQL only
#   docker-compose -f docker-compose.yml up -d postgres
#
# Service URLs:
#   - MinIO Console: http://localhost:9001 (minioadmin/minioadmin)
#   - MinIO API: http://localhost:9000
#   - Artifactory UI: http://localhost:8081 (admin/password)
#   - PostgreSQL: localhost:5432 (release_monitor/release_monitor_pass)
#
# Testing Connections:
#   # Test MinIO
#   aws s3 ls --endpoint-url http://localhost:9000
#
#   # Test Artifactory
#   curl http://localhost:8081/artifactory/api/system/ping
#
#   # Test PostgreSQL
#   psql postgresql://release_monitor:release_monitor_pass@localhost:5432/release_monitor
#
# Stop Services:
#   docker-compose -f docker-compose.yml down
#
# Remove All Data:
#   docker-compose -f docker-compose.yml down -v
#
# =============================================================================
